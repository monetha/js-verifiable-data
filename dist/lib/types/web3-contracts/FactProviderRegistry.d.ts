/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractOptions, Options } from "web3-eth-contract";
import { Block } from "web3-eth";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { Callback, TransactionObject } from "./types";

export class FactProviderRegistry extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  methods: {
    factProviders(
      arg0: string
    ): TransactionObject<{
      initialized: boolean;
      name: string;
      reputation_passport: string;
      website: string;
      0: boolean;
      1: string;
      2: string;
      3: string;
    }>;

    tokenFallback(
      _from: string,
      _value: number | string,
      _data: (string | number[])[]
    ): TransactionObject<void>;

    reclaimToken(_token: string): TransactionObject<void>;

    renounceOwnership(): TransactionObject<void>;

    reclaimEther(): TransactionObject<void>;

    transferOwnership(_newOwner: string): TransactionObject<void>;

    setFactProviderInfo(
      _factProvider: string,
      _factProviderName: string,
      _factProviderReputationPassport: string,
      _factProviderWebsite: string
    ): TransactionObject<void>;

    deleteFactProviderInfo(_factProvider: string): TransactionObject<void>;

    owner(): TransactionObject<string>;
  };
  events: {
    FactProviderAdded(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    FactProviderUpdated(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    FactProviderDeleted(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    OwnershipRenounced(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    OwnershipTransferred(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
